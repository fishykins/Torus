
//------------------------------------------------------------------------------
// <auto-generated>
//     This file was automatically generated by Unity.Entities.Editor.BurstInteropCodeGenerator
//     Any changes you make here will be overwritten
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To update this file, use the "DOTS -> Regenerate Burst Interop" menu option.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Burst;
using System.Runtime.InteropServices;

namespace Unity.Entities
{
     unsafe partial struct ChunkIterationUtility
    {

#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
        static bool _initialized = false;

        [BurstDiscard]
        private static void CheckDelegate(ref bool useDelegate)
        {
            //@TODO: This should use BurstCompiler.IsEnabled once that is available as an efficient API.
            useDelegate = true;
        }

        private static bool UseDelegate()
        {
            bool result = false;
            CheckDelegate(ref result);
            return result;
        }

        private delegate int _dlg_CalculateEntityCount(ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter);
        private static _dlg_CalculateEntityCount _bfp_CalculateEntityCount;
        private delegate int _dlg_CalculateChunkCount(ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter);
        private static _dlg_CalculateChunkCount _bfp_CalculateChunkCount;

#endif

        internal static void Initialize()
        {
#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
            if (_initialized)
                return;
            _initialized = true;
            _bfp_CalculateEntityCount = BurstCompiler.CompileFunctionPointer<_dlg_CalculateEntityCount>(_mono_to_burst_CalculateEntityCount).Invoke;
            _bfp_CalculateChunkCount = BurstCompiler.CompileFunctionPointer<_dlg_CalculateChunkCount>(_mono_to_burst_CalculateChunkCount).Invoke;

#endif
        }

        public  static int CalculateEntityCount (ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
            if (UseDelegate())
            {
                var _retval = default(int);
                _forward_mono_CalculateEntityCount(ref _retval, ref matchingArchetypes, ref filter);
                return _retval;
            }
#endif

            return _CalculateEntityCount(ref matchingArchetypes, ref filter);
        }

#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
        [BurstCompile]
        [MonoPInvokeCallback(typeof(_dlg_CalculateEntityCount))]
        private static int _mono_to_burst_CalculateEntityCount(ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
            return _CalculateEntityCount(ref matchingArchetypes, ref filter);
        }

        [BurstDiscard]
        private static void _forward_mono_CalculateEntityCount(ref int _retval, ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
            _retval = _bfp_CalculateEntityCount(ref matchingArchetypes, ref filter);
        }
#endif

        public  static int CalculateChunkCount (ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
            if (UseDelegate())
            {
                var _retval = default(int);
                _forward_mono_CalculateChunkCount(ref _retval, ref matchingArchetypes, ref filter);
                return _retval;
            }
#endif

            return _CalculateChunkCount(ref matchingArchetypes, ref filter);
        }

#if !(UNITY_DOTSRUNTIME || (UNITY_2020_1_OR_NEWER && UNITY_IOS))
        [BurstCompile]
        [MonoPInvokeCallback(typeof(_dlg_CalculateChunkCount))]
        private static int _mono_to_burst_CalculateChunkCount(ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
            return _CalculateChunkCount(ref matchingArchetypes, ref filter);
        }

        [BurstDiscard]
        private static void _forward_mono_CalculateChunkCount(ref int _retval, ref UnsafeMatchingArchetypePtrList matchingArchetypes, ref EntityQueryFilter filter)
        {
            _retval = _bfp_CalculateChunkCount(ref matchingArchetypes, ref filter);
        }
#endif




    }
}
