<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>਍㰀⌀䀀 琀攀洀瀀氀愀琀攀 搀攀戀甀最㴀∀吀爀甀攀∀ ⌀㸀ഀഀ
<#@ output extension=".gen.cs" #>਍㰀⌀䀀 愀猀猀攀洀戀氀礀 渀愀洀攀㴀∀匀礀猀琀攀洀⸀䌀漀爀攀∀ ⌀㸀ഀഀ
<#@ import namespace="System.Text" #>਍ഀഀ
//------------------------------------------------------------------------------਍⼀⼀ 㰀愀甀琀漀ⴀ最攀渀攀爀愀琀攀搀㸀ഀഀ
//     This code was generated by a tool.਍⼀⼀ഀഀ
//     TextTransform Samples/Packages/com.unity.collections/Unity.Collections.Tests/UnicodeTests.tt਍⼀⼀ഀഀ
//     Changes to this file may cause incorrect behavior and will be lost if਍⼀⼀     琀栀攀 挀漀搀攀 椀猀 爀攀最攀渀攀爀愀琀攀搀⸀ഀഀ
// </auto-generated>਍⼀⼀ⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀⴀഀഀ
਍⌀椀昀 ℀唀一䤀吀夀开䐀伀吀匀倀䰀䄀夀䔀刀ഀഀ
using System;਍甀猀椀渀最 匀礀猀琀攀洀⸀䜀氀漀戀愀氀椀稀愀琀椀漀渀㬀ഀഀ
using System.Threading;਍甀猀椀渀最 一唀渀椀琀⸀䘀爀愀洀攀眀漀爀欀㬀ഀഀ
using Unity.Collections;਍甀猀椀渀最 唀渀椀琀礀⸀䌀漀氀氀攀挀琀椀漀渀猀⸀䰀漀眀䰀攀瘀攀氀⸀唀渀猀愀昀攀㬀ഀഀ
਍渀愀洀攀猀瀀愀挀攀 一愀琀椀瘀攀匀琀爀椀渀最吀攀猀琀猀ഀഀ
{਍ഀഀ
[TestFixture("en-US")]਍嬀吀攀猀琀䘀椀砀琀甀爀攀⠀∀搀愀ⴀ䐀䬀∀⤀崀ഀഀ
internal class WordsTests਍笀ഀഀ
    CultureInfo testCulture;਍    䌀甀氀琀甀爀攀䤀渀昀漀 戀愀挀欀甀瀀䌀甀氀琀甀爀攀㬀ഀഀ
਍    瀀甀戀氀椀挀 圀漀爀搀猀吀攀猀琀猀⠀猀琀爀椀渀最 挀甀氀琀甀爀攀⤀ഀഀ
    {਍        琀攀猀琀䌀甀氀琀甀爀攀 㴀 䌀甀氀琀甀爀攀䤀渀昀漀⸀䌀爀攀愀琀攀匀瀀攀挀椀昀椀挀䌀甀氀琀甀爀攀⠀挀甀氀琀甀爀攀⤀㬀ഀഀ
    }਍ഀഀ
    [SetUp]਍    瀀甀戀氀椀挀 瘀椀爀琀甀愀氀 瘀漀椀搀 匀攀琀甀瀀⠀⤀ഀഀ
    {਍        戀愀挀欀甀瀀䌀甀氀琀甀爀攀 㴀 吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀䌀甀氀琀甀爀攀㬀ഀഀ
        Thread.CurrentThread.CurrentCulture = testCulture;਍        圀漀爀搀匀琀漀爀愀最攀⸀匀攀琀甀瀀⠀⤀㬀ഀഀ
    }਍ഀഀ
    [TearDown]਍    瀀甀戀氀椀挀 瘀椀爀琀甀愀氀 瘀漀椀搀 吀攀愀爀䐀漀眀渀⠀⤀ഀഀ
    {਍        吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀䌀甀氀琀甀爀攀 㴀 戀愀挀欀甀瀀䌀甀氀琀甀爀攀㬀ഀഀ
    }਍ഀഀ
    [Test]਍    瀀甀戀氀椀挀 甀渀猀愀昀攀 瘀漀椀搀 唀琀昀㠀䔀渀挀漀搀攀䐀攀挀漀搀攀⠀嬀刀愀渀最攀⠀　Ⰰ 　砀䐀㜀䘀䘀Ⰰ 㤀㤀㜀⤀崀 椀渀琀 椀渀瀀甀琀开甀挀猀⤀ഀഀ
    {਍        瘀愀爀 挀漀渀瘀攀爀琀攀搀 㴀 渀攀眀 戀礀琀攀嬀㐀崀㬀ഀഀ
        fixed (byte* c = converted)਍        笀ഀഀ
            ConversionError error;਍            椀渀琀 眀爀椀琀攀开氀攀渀最琀栀 㴀 　㬀ഀഀ
            error = Unicode.UcsToUtf8(c, ref write_length, converted.Length, new Unicode.Rune{value=input_ucs});਍            䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀䌀漀渀瘀攀爀猀椀漀渀䔀爀爀漀爀⸀一漀渀攀Ⰰ 攀爀爀漀爀⤀㬀ഀഀ
            int read_length = 0;਍            攀爀爀漀爀 㴀 唀渀椀挀漀搀攀⸀唀琀昀㠀吀漀唀挀猀⠀漀甀琀 瘀愀爀 漀甀琀瀀甀琀开爀甀渀攀Ⰰ 挀Ⰰ 爀攀昀 爀攀愀搀开氀攀渀最琀栀Ⰰ 眀爀椀琀攀开氀攀渀最琀栀⤀㬀ഀഀ
            Assert.AreEqual(ConversionError.None, error);਍            䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀眀爀椀琀攀开氀攀渀最琀栀Ⰰ 爀攀愀搀开氀攀渀最琀栀⤀㬀ഀഀ
            Assert.AreEqual(output_rune.value, input_ucs);਍        紀ഀഀ
    }਍ഀഀ
    [Test]਍    瀀甀戀氀椀挀 甀渀猀愀昀攀 瘀漀椀搀 唀琀昀㄀㘀䔀渀挀漀搀攀䐀攀挀漀搀攀⠀嬀刀愀渀最攀⠀　Ⰰ 　砀䐀㜀䘀䘀Ⰰ㤀㤀㜀⤀崀 椀渀琀 椀渀瀀甀琀开甀挀猀⤀ഀഀ
    {਍        瘀愀爀 挀漀渀瘀攀爀琀攀搀 㴀 渀攀眀 挀栀愀爀嬀㈀崀㬀ഀഀ
        fixed (char* c = converted)਍        笀ഀഀ
            ConversionError error;਍            椀渀琀 眀爀椀琀攀开氀攀渀最琀栀 㴀 　㬀ഀഀ
            error = Unicode.UcsToUtf16(c, ref write_length, converted.Length, new Unicode.Rune{value = input_ucs});਍            䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀䌀漀渀瘀攀爀猀椀漀渀䔀爀爀漀爀⸀一漀渀攀Ⰰ 攀爀爀漀爀⤀㬀ഀഀ
            int read_length = 0;਍            攀爀爀漀爀 㴀 唀渀椀挀漀搀攀⸀唀琀昀㄀㘀吀漀唀挀猀⠀漀甀琀 瘀愀爀 漀甀琀瀀甀琀开爀甀渀攀Ⰰ 挀Ⰰ 爀攀昀 爀攀愀搀开氀攀渀最琀栀Ⰰ 眀爀椀琀攀开氀攀渀最琀栀⤀㬀ഀഀ
            Assert.AreEqual(ConversionError.None, error);਍            䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀眀爀椀琀攀开氀攀渀最琀栀Ⰰ 爀攀愀搀开氀攀渀最琀栀⤀㬀ഀഀ
            Assert.AreEqual(output_rune.value, input_ucs);਍        紀ഀഀ
    }਍ഀഀ
    unsafe void Utf16ToUtf8(string source)਍    笀ഀഀ
        var converted = new byte[source.Length * 4]; // UTF-8 text can be up to 2x as long as UTF-16 text਍        瘀愀爀 搀攀猀琀椀渀愀琀椀漀渀 㴀 渀攀眀 挀栀愀爀嬀猀漀甀爀挀攀⸀䰀攀渀最琀栀崀㬀ഀഀ
        fixed(byte* c = converted)਍        昀椀砀攀搀⠀挀栀愀爀⨀ 猀 㴀 猀漀甀爀挀攀⤀ഀഀ
        fixed(char* d = destination)਍        笀ഀഀ
            Unicode.Utf16ToUtf8(s, source.Length, c, out var converted_length, converted.Length);਍            唀渀椀挀漀搀攀⸀唀琀昀㠀吀漀唀琀昀㄀㘀⠀挀Ⰰ 挀漀渀瘀攀爀琀攀搀开氀攀渀最琀栀Ⰰ 搀Ⰰ 漀甀琀 瘀愀爀 搀攀猀琀椀渀愀琀椀漀渀开氀攀渀最琀栀Ⰰ 搀攀猀琀椀渀愀琀椀漀渀⸀䰀攀渀最琀栀⤀㬀ഀഀ
            Assert.AreEqual(source, destination);਍        紀ഀഀ
    }਍ഀഀ
    [TestCase("The Quick Brown Fox Jumps Over The Lazy Dog")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䄀氀戀攀爀琀 漀猀琀椀 昀愀最漀琀椀渀 樀愀 琀爀礀琀琀椀 瀀甀栀欀甀瘀愀渀 洀攀氀漀搀椀愀渀⸀∀Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀䘀椀渀渀椀猀栀⤀∀⤀崀ഀഀ
    [TestCase("Franz jagt im komplett verwahrlosten Taxi quer durch Bayern.", TestName = "{m}(German)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀퀀�� 턀�  툀�팅 픅휅 혅 �퐅㼅∀Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀䠀攀戀爀攀眀⤀∀⤀崀ഀഀ
    [TestCase("PORTEZ CE VIEUX WHISKY AU JUGE BLOND QUI FUME.", TestName = "{m}(French)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䐀贰漰欰笰砰栰愰訰氰謰鈰輰䬰蠰弰谰崰搰洰樰褰耰䘰逰渰䨰估萰縰儰田匰䠰昰䈰唰䴰蘰脰缰地鄰爰舰嬰夰∰Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀䨀愀瀀愀渀攀猀攀⤀∀⤀崀ഀഀ
    [TestCase("키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.", TestName = "{m}(Korean)")]਍    瀀甀戀氀椀挀 甀渀猀愀昀攀 瘀漀椀搀 唀琀昀㄀㘀吀漀唀琀昀㠀䈀䴀倀⠀猀琀爀椀渀最 猀漀甀爀挀攀⤀ഀഀ
    {਍        唀琀昀㄀㘀吀漀唀琀昀㠀⠀猀漀甀爀挀攀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", TestName = "{m}(MoonPhases)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㔀默㗜꿘㗜께㗜鿘㗜돘㗜꧘㗜ꯘ㗜ꋘ⋜Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀䌀甀爀猀椀瘀攀⤀∀⤀崀ഀഀ
    public unsafe void Utf16ToUtf8TransBMP(string source)਍    笀ഀഀ
        Utf16ToUtf8(source);਍    紀ഀഀ
਍    㰀⌀ 瘀愀爀 匀䤀娀䔀匀 㴀 渀攀眀 椀渀琀嬀崀笀㌀㈀Ⰰ㘀㐀Ⰰ㄀㈀㠀Ⰰ㔀㄀㈀Ⰰ㐀　㤀㘀紀㬀ഀഀ
       foreach(var BYTES in SIZES)਍       笀ഀഀ
         var ALMOST_TOO_BIG = BYTES-2;਍         瘀愀爀 吀伀伀开䈀䤀䜀 㴀 䈀夀吀䔀匀ⴀ㄀㬀ഀഀ
       #>਍ഀഀ
    [TestCase(<#=ALMOST_TOO_BIG#>, CopyError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀㰀⌀㴀吀伀伀开䈀䤀䜀⌀㸀Ⰰ 䌀漀瀀礀䔀爀爀漀爀⸀吀爀甀渀挀愀琀椀漀渀⤀崀ഀഀ
    public void NativeString<#=BYTES#>AtMaximumSizeWorks(int size, CopyError expectedError)਍    笀ഀഀ
        var a = new String('o', size);਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀⤀㬀ഀഀ
        var error = aa.CopyFrom(a);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀䔀爀爀漀爀Ⰰ 攀爀爀漀爀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("red", 0, 0, ParseError.Syntax)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀　∀Ⰰ ㄀Ⰰ 　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("-1", 2, -1, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ　∀Ⰰ ㈀Ⰰ 　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("100", 3, 100, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㄀　　∀Ⰰ 㐀Ⰰ ⴀ㄀　　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("100.50", 3, 100, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㄀　　愀戀∀Ⰰ 㐀Ⰰ ⴀ㄀　　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("2147483647", 10, 2147483647, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㈀㄀㐀㜀㐀㠀㌀㘀㐀㠀∀Ⰰ ㄀㄀Ⰰ ⴀ㈀㄀㐀㜀㐀㠀㌀㘀㐀㠀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("2147483648", 10, 0, ParseError.Overflow)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㈀㄀㐀㜀㐀㠀㌀㘀㐀㤀∀Ⰰ ㄀㄀Ⰰ 　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀伀瘀攀爀昀氀漀眀⤀崀ഀഀ
    public void NativeString<#=BYTES#>ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)਍    笀ഀഀ
        NativeString<#=BYTES#> aa = new NativeString<#=BYTES#>(a);਍        椀渀琀 漀昀昀猀攀琀 㴀 　㬀ഀഀ
        int output = 0;਍        瘀愀爀 爀攀猀甀氀琀 㴀 愀愀⸀倀愀爀猀攀⠀爀攀昀 漀昀昀猀攀琀Ⰰ 爀攀昀 漀甀琀瀀甀琀⤀㬀ഀഀ
        Assert.AreEqual(expectedResult, result);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀伀昀昀猀攀琀Ⰰ 漀昀昀猀攀琀⤀㬀ഀഀ
        if (result == ParseError.None)਍        笀ഀഀ
            Assert.AreEqual(expectedOutput, output);਍        紀ഀഀ
    }਍ഀഀ
    [TestCase("red", 0, ParseError.Syntax)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀　∀Ⰰ ㄀Ⰰ  倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("-1", 2, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ　∀Ⰰ ㈀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("100", 3, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㄀　　∀Ⰰ 㐀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("100.50", 6, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㈀㄀㐀㜀㐀㠀㌀㘀㐀㠀∀Ⰰ ㄀　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("-2147483649", 11, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㄀　䔀㄀　∀Ⰰ 㘀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("-10E-10", 7, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ⴀ㄀　䔀⬀㄀　∀Ⰰ 㜀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("10E-40", 5, ParseError.Underflow)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀　䔀⬀㐀　∀Ⰰ 㔀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀伀瘀攀爀昀氀漀眀⤀崀ഀഀ
    [TestCase("-Infinity", 9, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䤀渀昀椀渀椀琀礀∀Ⰰ 㠀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("1000001",       7, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀　　　　　　㄀∀Ⰰ      㠀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("100000001",     9, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀　　　　　　　　㄀∀Ⰰ   ㄀　Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase("10000000001",  11, ParseError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀　　　　　　　　　　㄀∀Ⰰ ㄀㈀Ⰰ 倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    public void NativeString<#=BYTES#>ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)਍    笀ഀഀ
        var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);਍        瘀愀爀 氀漀挀愀氀椀稀攀搀匀琀爀椀渀最 㴀 甀渀氀漀挀愀氀椀稀攀搀匀琀爀椀渀最⸀刀攀瀀氀愀挀攀⠀✀⸀✀Ⰰ 氀漀挀愀氀椀稀攀搀䐀攀挀椀洀愀氀匀攀瀀愀爀愀琀漀爀⤀㬀ഀഀ
        float expectedOutput = 0;਍        琀爀礀 笀 攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀 㴀 匀椀渀最氀攀⸀倀愀爀猀攀⠀氀漀挀愀氀椀稀攀搀匀琀爀椀渀最⤀㬀 紀 挀愀琀挀栀 笀紀ഀഀ
        NativeString<#=BYTES#> nativeLocalizedString = new NativeString<#=BYTES#>(localizedString);਍        椀渀琀 漀昀昀猀攀琀 㴀 　㬀ഀഀ
        float output = 0;਍        瘀愀爀 爀攀猀甀氀琀 㴀 渀愀琀椀瘀攀䰀漀挀愀氀椀稀攀搀匀琀爀椀渀最⸀倀愀爀猀攀⠀爀攀昀 漀昀昀猀攀琀Ⰰ 爀攀昀 漀甀琀瀀甀琀Ⰰ 氀漀挀愀氀椀稀攀搀䐀攀挀椀洀愀氀匀攀瀀愀爀愀琀漀爀⤀㬀ഀഀ
        Assert.AreEqual(expectedResult, result);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀伀昀昀猀攀琀Ⰰ 漀昀昀猀攀琀⤀㬀ഀഀ
        if (result == ParseError.None)਍        笀ഀഀ
            Assert.AreEqual(expectedOutput, output);਍        紀ഀഀ
    }਍ഀഀ
    [TestCase(-2147483648)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀　　⤀崀ഀഀ
    [TestCase(-1)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⤀崀ഀഀ
    [TestCase(1)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⤀崀ഀഀ
    [TestCase(2147483647)]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀䘀漀爀洀愀琀䤀渀琀⠀椀渀琀 椀渀瀀甀琀⤀ഀഀ
    {਍        瘀愀爀 攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀 㴀 椀渀瀀甀琀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        NativeString<#=BYTES#> aa = new NativeString<#=BYTES#>();਍        瘀愀爀 爀攀猀甀氀琀 㴀 愀愀⸀䘀漀爀洀愀琀⠀椀渀瀀甀琀⤀㬀ഀഀ
        Assert.AreEqual(FormatError.None, result);਍        瘀愀爀 愀挀琀甀愀氀伀甀琀瀀甀琀 㴀 愀愀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        Assert.AreEqual(expectedOutput, actualOutput);਍    紀ഀഀ
਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㤀㈀㈀㌀㌀㜀㈀　㌀㘀㠀㔀㐀㜀㜀㔀㠀　㠀䰀⤀崀ഀഀ
    [TestCase(-100L)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀䰀⤀崀ഀഀ
    [TestCase(0L)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀䰀⤀崀ഀഀ
    [TestCase(100L)]਍    嬀吀攀猀琀䌀愀猀攀⠀㤀㈀㈀㌀㌀㜀㈀　㌀㘀㠀㔀㐀㜀㜀㔀㠀　㜀䰀⤀崀ഀഀ
    public void NativeString<#=BYTES#>FormatLong(long input)਍    笀ഀഀ
        var expectedOutput = input.ToString();਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀⤀㬀ഀഀ
        var result = aa.Format(input);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀Ⰰ 爀攀猀甀氀琀⤀㬀ഀഀ
        var actualOutput = aa.ToString();਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀Ⰰ 愀挀琀甀愀氀伀甀琀瀀甀琀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase(Single.NaN, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀匀椀渀最氀攀⸀倀漀猀椀琀椀瘀攀䤀渀昀椀渀椀琀礀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(Single.NegativeInfinity, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-1.0f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⸀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-100.0f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⸀㔀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(0.001005f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　　　㄀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(0.00001f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　　　　　㄀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-1E10f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀䔀ⴀ㄀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    public void NativeString<#=BYTES#>FormatFloat(float input, FormatError expectedResult)਍    笀ഀഀ
        var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);਍        瘀愀爀 攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀 㴀 椀渀瀀甀琀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        NativeString<#=BYTES#> aa = new NativeString<#=BYTES#>();਍        瘀愀爀 爀攀猀甀氀琀 㴀 愀愀⸀䘀漀爀洀愀琀⠀椀渀瀀甀琀Ⰰ 氀漀挀愀氀椀稀攀搀䐀攀挀椀洀愀氀匀攀瀀愀爀愀琀漀爀⤀㬀ഀഀ
        Assert.AreEqual(expectedResult, result);਍        椀昀 ⠀爀攀猀甀氀琀 㴀㴀 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀ഀഀ
        {਍            瘀愀爀 愀挀琀甀愀氀伀甀琀瀀甀琀 㴀 愀愀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
            Assert.AreEqual(expectedOutput, actualOutput);਍        紀ഀഀ
    }਍ഀഀ
    [TestCase(-2147483648)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀　　⤀崀ഀഀ
    [TestCase(-1)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⤀崀ഀഀ
    [TestCase(1)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⤀崀ഀഀ
    [TestCase(2147483647)]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀䄀瀀瀀攀渀搀䤀渀琀⠀椀渀琀 椀渀瀀甀琀⤀ഀഀ
    {਍        瘀愀爀 攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀 㴀 ∀昀漀漀∀ ⬀ 椀渀瀀甀琀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        NativeString<#=BYTES#> aa = "foo";਍        瘀愀爀 爀攀猀甀氀琀 㴀 愀愀⸀䄀瀀瀀攀渀搀⠀椀渀瀀甀琀⤀㬀ഀഀ
        Assert.AreEqual(FormatError.None, result);਍        瘀愀爀 愀挀琀甀愀氀伀甀琀瀀甀琀 㴀 愀愀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        Assert.AreEqual(expectedOutput, actualOutput);਍    紀ഀഀ
਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㤀㈀㈀㌀㌀㜀㈀　㌀㘀㠀㔀㐀㜀㜀㔀㠀　㠀䰀⤀崀ഀഀ
    [TestCase(-100L)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀䰀⤀崀ഀഀ
    [TestCase(0L)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀䰀⤀崀ഀഀ
    [TestCase(100L)]਍    嬀吀攀猀琀䌀愀猀攀⠀㤀㈀㈀㌀㌀㜀㈀　㌀㘀㠀㔀㐀㜀㜀㔀㠀　㜀䰀⤀崀ഀഀ
    public void NativeString<#=BYTES#>AppendLong(long input)਍    笀ഀഀ
        var expectedOutput = "foo" + input.ToString();਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 ∀昀漀漀∀㬀ഀഀ
        var result = aa.Append(input);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀Ⰰ 爀攀猀甀氀琀⤀㬀ഀഀ
        var actualOutput = aa.ToString();਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀Ⰰ 愀挀琀甀愀氀伀甀琀瀀甀琀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase(Single.NaN, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀匀椀渀最氀攀⸀倀漀猀椀琀椀瘀攀䤀渀昀椀渀椀琀礀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(Single.NegativeInfinity, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-1.0f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⸀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-100.0f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀㄀　　⸀㔀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(0.001005f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　　　㄀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(0.00001f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀　⸀　　　　　㄀昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    [TestCase(-1E10f, FormatError.None)]਍    嬀吀攀猀琀䌀愀猀攀⠀ⴀ㄀䔀ⴀ㄀　昀Ⰰ 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀崀ഀഀ
    public void NativeString<#=BYTES#>AppendFloat(float input, FormatError expectedResult)਍    笀ഀഀ
        var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);਍        瘀愀爀 攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀 㴀 ∀昀漀漀∀ ⬀ 椀渀瀀甀琀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
        NativeString<#=BYTES#> aa = "foo";਍        瘀愀爀 爀攀猀甀氀琀 㴀 愀愀⸀䄀瀀瀀攀渀搀⠀椀渀瀀甀琀Ⰰ 氀漀挀愀氀椀稀攀搀䐀攀挀椀洀愀氀匀攀瀀愀爀愀琀漀爀⤀㬀ഀഀ
        Assert.AreEqual(expectedResult, result);਍        椀昀 ⠀爀攀猀甀氀琀 㴀㴀 䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀⤀ഀഀ
        {਍            瘀愀爀 愀挀琀甀愀氀伀甀琀瀀甀琀 㴀 愀愀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
            Assert.AreEqual(expectedOutput, actualOutput);਍        紀ഀഀ
    }਍ഀഀ
    [Test]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀䘀漀爀洀愀琀一攀最愀琀椀瘀攀娀攀爀漀⠀⤀ഀഀ
    {਍        昀氀漀愀琀 椀渀瀀甀琀 㴀 ⴀ　⸀　昀㬀ഀഀ
        var expectedOutput = input.ToString();਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀⤀㬀ഀഀ
        var result = aa.Format(input);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀䘀漀爀洀愀琀䔀爀爀漀爀⸀一漀渀攀Ⰰ 爀攀猀甀氀琀⤀㬀ഀഀ
        var actualOutput = aa.ToString();਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀攀砀瀀攀挀琀攀搀伀甀琀瀀甀琀Ⰰ 愀挀琀甀愀氀伀甀琀瀀甀琀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("en-US")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀搀愀ⴀ䐀䬀∀⤀崀ഀഀ
    public void NativeString<#=BYTES#>ParseFloatLocale(String locale)਍    笀ഀഀ
        var original = CultureInfo.CurrentCulture;਍        琀爀礀ഀഀ
        {਍            吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀吀栀爀攀愀搀⸀䌀甀爀爀攀渀琀䌀甀氀琀甀爀攀 㴀 渀攀眀 䌀甀氀琀甀爀攀䤀渀昀漀⠀氀漀挀愀氀攀⤀㬀ഀഀ
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);਍            昀氀漀愀琀 瘀愀氀甀攀 㴀 ㄀⸀㔀昀㬀ഀഀ
            NativeString<#=BYTES#> native = new NativeString<#=BYTES#>();਍            渀愀琀椀瘀攀⸀䘀漀爀洀愀琀⠀瘀愀氀甀攀Ⰰ 氀漀挀愀氀椀稀攀搀䐀攀挀椀洀愀氀匀攀瀀愀爀愀琀漀爀⤀㬀ഀഀ
            var nativeResult = native.ToString();਍            瘀愀爀 洀愀渀愀最攀搀刀攀猀甀氀琀 㴀 瘀愀氀甀攀⸀吀漀匀琀爀椀渀最⠀⤀㬀ഀഀ
            Assert.AreEqual(managedResult, nativeResult);਍        紀ഀഀ
        finally਍        笀ഀഀ
            Thread.CurrentThread.CurrentCulture = original;਍        紀ഀഀ
    }਍ഀഀ
    [Test]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀倀愀爀猀攀䘀氀漀愀琀一愀渀⠀⤀ഀഀ
    {਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀∀一愀一∀⤀㬀ഀഀ
        int offset = 0;਍        昀氀漀愀琀 漀甀琀瀀甀琀 㴀 　㬀ഀഀ
        var result = aa.Parse(ref offset, ref output);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀倀愀爀猀攀䔀爀爀漀爀⸀一漀渀攀Ⰰ 爀攀猀甀氀琀⤀㬀ഀഀ
        Assert.IsTrue(Single.IsNaN(output));਍    紀ഀഀ
਍    嬀吀攀猀琀䌀愀猀攀⠀∀爀攀搀∀⤀崀ഀഀ
    [TestCase("紅色", TestName="{m}(Chinese-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀⤀崀ഀഀ
    [TestCase("村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀⤀∀⤀崀ഀഀ
    public void NativeString<#=BYTES#>ToStringWorks(String a)਍    笀ഀഀ
        NativeString<#=BYTES#> aa = new NativeString<#=BYTES#>(a);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀愀愀⸀吀漀匀琀爀椀渀最⠀⤀Ⰰ 愀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("monkey", "monkey")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀礀攀氀氀漀眀∀Ⰰ∀最爀攀攀渀∀⤀崀ഀഀ
    [TestCase("violet","紅色", TestName="{m}(Violet-Chinese-Red")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀＀牾⊂Ⰰ∀�犄⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ䜀爀攀攀渀ⴀ䈀氀甀攀∀⤀崀ഀഀ
    [TestCase("靛蓝色","紫罗兰色", TestName="{m}(Chinese-Indigo-Violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䨀愀洀攀猀 䴀漀渀爀漀攀∀Ⰰ∀䨀漀栀渀 儀甀椀渀挀礀 䄀搀愀洀猀∀⤀崀ഀഀ
    [TestCase("Andrew Jackson","村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀渀搀爀攀眀䨀愀挀欀猀漀渀ⴀ䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀∀⤀崀ഀഀ
    [TestCase("三島 由紀夫","吉本ばなな", TestName="{m}(MishimaYukio-YoshimotoBanana")]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀䔀焀甀愀氀猀圀漀爀欀猀⠀匀琀爀椀渀最 愀Ⰰ 匀琀爀椀渀最 戀⤀ഀഀ
    {਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀愀⤀㬀ഀഀ
        NativeString<#=BYTES#> bb = new NativeString<#=BYTES#>(b);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀愀愀⸀䔀焀甀愀氀猀⠀戀戀⤀Ⰰ 愀⸀䔀焀甀愀氀猀⠀戀⤀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("monkey", "monkey")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀爀攀搀∀Ⰰ∀漀爀愀渀最攀∀⤀崀ഀഀ
    [TestCase("violet","紅色", TestName="{m}(Chinese-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀夀牪⊂Ⰰ∀쐀犞⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ伀爀愀渀最攀ⴀ夀攀氀氀漀眀∀⤀崀ഀഀ
    [TestCase("靛蓝色","紫罗兰色", TestName="{m}(Chinese-Indigo-Violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䨀愀洀攀猀 䴀漀渀爀漀攀∀Ⰰ∀䨀漀栀渀 儀甀椀渀挀礀 䄀搀愀洀猀∀⤀崀ഀഀ
    [TestCase("Andrew Jackson","村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀渀搀爀攀眀䨀愀挀欀猀漀渀ⴀ䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀∀⤀崀ഀഀ
    [TestCase("三島 由紀夫","吉本ばなな", TestName="{m}(MishimaYukio-YoshimotoBanana")]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀䌀漀洀瀀愀爀攀吀漀圀漀爀欀猀⠀匀琀爀椀渀最 愀Ⰰ 匀琀爀椀渀最 戀⤀ഀഀ
    {਍        一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀 愀愀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀⠀愀⤀㬀ഀഀ
        NativeString<#=BYTES#> bb = new NativeString<#=BYTES#>(b);਍        瘀愀爀 挀　 㴀 愀愀⸀䌀漀洀瀀愀爀攀吀漀⠀戀戀⤀㬀ഀഀ
        var c1 = a.CompareTo(b);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀挀　Ⰰ 挀㄀⤀㬀ഀഀ
    }਍ഀഀ
    [Test]਍    瀀甀戀氀椀挀 瘀漀椀搀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀匀椀稀攀伀昀⠀⤀ഀഀ
    {਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀唀渀猀愀昀攀唀琀椀氀椀琀礀⸀匀椀稀攀伀昀㰀一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀䈀夀吀䔀匀⌀㸀㸀⠀⤀Ⰰ 㰀⌀㴀䈀夀吀䔀匀⌀㸀⤀㬀ഀഀ
    }਍ഀഀ
<#਍    瘀愀爀 氀愀礀漀甀琀匀琀爀椀渀最 㴀 渀攀眀 猀琀爀椀渀最嬀崀 笀ഀഀ
        "red",਍        ∀Ԁ牽⊂Ⰰഀഀ
        "црвена",਍        ∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀Ⰰഀഀ
        "村਍╎㥦≪Ⰰഀഀ
        "🌕🌖🌗🌘🌑🌒🌓🌔",਍        ∀㔀默㗜꿘㗜께㗜鿘㗜돘㗜꧘㗜ꯘ㗜ꋘ⋜Ⰰഀഀ
        "로마는 하루아침에 이루어진 것이 아니다",਍        ∀ᬀ〄㨄㸄 䈀㠄 堀㔄 㼀㬄㠄䈄㨄䌄 ㈀㸄㐄䌄 㜀〄㰄䌄䈄㠄䈄㠄 㠀 ㄀䌄㐄〄㬄䌄 㴀〄处䌄䈄㠄䈄㠄∄Ⰰഀഀ
        "Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.",਍        ∀⠀ Ԁⴉ㼉㘉䜉ᔉ䬉 ⠀ 㠀ȉ㠉䴉ᔉ㸉〉̉ 㠀㼉⸉䴉㤉㠉䴉⼉ ᔀ䌉⼉␉䜉 㔀⠉䜉㔉㼉ᔉ䴉〉⸉㸉〉䴉ᰉ㼉␉㠉␉䴉㔉㠉䴉⼉ 㠀䴉㔉⼉⸉䜉㔉 ⸀䌉ᜉ䜉⠉䴉☉䴉〉␉㸉∉ഀഀ
    };਍    瘀愀爀 氀愀礀漀甀琀一愀洀攀 㴀 渀攀眀 猀琀爀椀渀最嬀崀 笀ഀഀ
        "red",਍        ∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ刀攀搀⤀∀Ⰰഀഀ
        "{m}(Serbian-Red)",਍        ∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀Ⰰഀഀ
        "{m}(HarukiMurakami)",਍        ∀笀洀紀⠀䴀漀漀渀倀栀愀猀攀猀⤀∀Ⰰഀഀ
        "{m}(Cursive)",਍        ∀笀洀紀⠀䬀漀爀攀愀渀 ⴀ 刀漀洀攀 眀愀猀 渀漀琀 洀愀搀攀 漀瘀攀爀渀椀最栀琀⤀∀Ⰰഀഀ
        "{m}(Serbian-Proverb)",਍        ∀笀洀紀⠀䴀漀渀最漀氀椀愀渀ⴀ倀爀漀瘀攀爀戀㄀⤀∀Ⰰഀഀ
        "{m}(Hindi-Proverb3)"਍    紀㬀ഀഀ
    for(var i = 0; i < layoutString.Length; ++i)਍    笀ഀഀ
        var utf8 = Encoding.UTF8;਍        戀礀琀攀嬀崀 甀琀昀䈀礀琀攀猀 㴀 甀琀昀㠀⸀䜀攀琀䈀礀琀攀猀⠀氀愀礀漀甀琀匀琀爀椀渀最嬀椀崀⤀㬀ഀഀ
        byte[] expected = new byte[utfBytes.Length + 2];਍        攀砀瀀攀挀琀攀搀嬀　崀 㴀 ⠀戀礀琀攀⤀⠀⠀甀琀昀䈀礀琀攀猀⸀䰀攀渀最琀栀 㸀㸀 　⤀ ☀ 　砀䘀䘀⤀㬀ഀഀ
        expected[1] = (byte)((utfBytes.Length >> 8) & 0xFF);਍        䄀爀爀愀礀⸀䌀漀瀀礀⠀甀琀昀䈀礀琀攀猀Ⰰ 　Ⰰ 攀砀瀀攀挀琀攀搀Ⰰ ㈀Ⰰ 甀琀昀䈀礀琀攀猀⸀䰀攀渀最琀栀⤀㬀ഀഀ
        if(expected.Length <= BYTES)਍        笀ഀഀ
            var bytes = String.Join(", ", expected);਍        ⌀㸀ഀഀ
    [TestCase("<#=layoutString[i]#>", new byte[]{<#=bytes#>}, TestName="<#=layoutName[i]#>")]਍㰀⌀ഀഀ
        }਍    紀ഀഀ
#>        unsafe public void NativeString<#=BYTES#>Layout(String a, byte[] expected)਍    笀ഀഀ
        fixed(byte* expectedBytes = expected)਍        笀ഀഀ
            NativeString<#=BYTES#> actual = a;਍            戀礀琀攀⨀ 愀挀琀甀愀氀䈀礀琀攀猀 㴀 ⠀戀礀琀攀⨀⤀☀愀挀琀甀愀氀㬀ഀഀ
            Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));਍        紀ഀഀ
    }਍ഀഀ
<# foreach(var OTHERBYTES in SIZES)਍笀ഀഀ
 if(OTHERBYTES != BYTES)਍ 笀 ⌀㸀ഀഀ
਍    嬀吀攀猀琀䌀愀猀攀⠀∀爀攀搀∀⤀崀ഀഀ
    [TestCase("紅色", TestName="{m}(Chinese-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀⤀崀ഀഀ
    [TestCase("村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀⤀∀⤀崀ഀഀ
    public void NativeString<#=BYTES#>ToNativeString<#=OTHERBYTES#>Works(String a)਍    笀ഀഀ
        var b = new NativeString<#=BYTES#>(a);਍        瘀愀爀 挀 㴀 渀攀眀 一愀琀椀瘀攀匀琀爀椀渀最㰀⌀㴀伀吀䠀䔀刀䈀夀吀䔀匀⌀㸀⠀戀⤀㬀ഀഀ
        String d = c.ToString();਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀愀Ⰰ 搀⤀㬀ഀഀ
    }਍㰀⌀ 紀ഀഀ
} } #>਍ഀഀ
    [TestCase("red")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀漀爀愀渀最攀∀⤀崀ഀഀ
    [TestCase("yellow")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀最爀攀攀渀∀⤀崀ഀഀ
    [TestCase("blue")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀椀渀搀椀最漀∀⤀崀ഀഀ
    [TestCase("violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀Ԁ牽⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ刀攀搀⤀∀⤀崀ഀഀ
    [TestCase("橙色", TestName="{m}(Chinese-Orange)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀쐀犞⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ夀攀氀氀漀眀⤀∀⤀崀ഀഀ
    [TestCase("绿色", TestName="{m}(Chinese-Green)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀�犄⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ䈀氀甀攀∀⤀崀ഀഀ
    [TestCase("靛蓝色", TestName="{m}(Chinese-Indigo")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀⬀坽灿牑⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ嘀椀漀氀攀琀∀⤀崀ഀഀ
    [TestCase("црвена", TestName = "{m}(Serbian-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㴀〄䀄〄㴄弄〄䄄䈄〄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ伀爀愀渀最攀⤀∀⤀崀ഀഀ
    [TestCase("жута", TestName = "{m}(Serbian-Yellow)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㜀㔄㬄㔄㴄〄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ䜀爀攀攀渀⤀∀⤀崀ഀഀ
    [TestCase("плава", TestName = "{m}(Serbian-Blue")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㠀㴄㐄㠄㌄㸄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ䤀渀搀椀最漀∀⤀崀ഀഀ
    [TestCase("љубичаста", TestName = "{m}(Serbian-Violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀⤀崀ഀഀ
    [TestCase("John Adams")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀吀栀漀洀愀猀 䨀攀昀昀攀爀猀漀渀∀⤀崀ഀഀ
    [TestCase("James Madison")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䨀愀洀攀猀 䴀漀渀爀漀攀∀⤀崀ഀഀ
    [TestCase("John Quincy Adams")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䄀渀搀爀攀眀 䨀愀挀欀猀漀渀∀⤀崀ഀഀ
    [TestCase("村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀⤀∀⤀崀ഀഀ
    [TestCase("三島 由紀夫", TestName="{m}(MishimaYukio)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ऀⱔ灧樰樰∰Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀夀漀猀栀椀洀漀琀漀䈀愀渀愀渀愀⤀∀⤀崀ഀഀ
    [TestCase("大江健三郎", TestName="{m}(OeKenzaburo)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀�⁺뜀ၞ≢Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀愀眀愀戀愀琀愀夀愀猀甀渀愀爀椀⤀∀⤀崀ഀഀ
    [TestCase("桐野夏生", TestName="{m}(TongyeXiasheng)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ꔀ�赝䮟쭎≎Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀刀礀甀渀漀猀甀欀攀䄀欀甀琀愀最愀眀愀⤀∀⤀崀ഀഀ
    [TestCase("로마는 하루아침에 이루어진 것이 아니다", TestName="{m}(Korean - Rome was not made overnight)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀글킰䂹⃇저À€€␀킼䂹⃇倀É€钴⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("말을 냇가에 끌고 갈 수는 있어도 억지로 물을 먹일 수는 없다", TestName="{m}(Korean-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㠀釖璷탇賅€㰀Ⓕ¸쒬₳ᔀ쳂₹⠀곌璹₺뀀⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("Љубазни фењерџија чађавог лица хоће да ми покаже штос.", TestName = "{m}(Serbian-Pangram)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ᬀ〄㨄㸄 䈀㠄 堀㔄 㼀㬄㠄䈄㨄䌄 ㈀㸄㐄䌄 㜀〄㰄䌄䈄㠄䈄㠄 㠀 ㄀䌄㐄〄㬄䌄 㴀〄处䌄䈄㠄䈄㠄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ倀爀漀瘀攀爀戀⤀∀⤀崀ഀഀ
    [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", TestName="{m}(Mongolian-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㴄㌄䀄䄄㴄 ㄀㸄䀄㸄㸄㴄䬄 䔀㸄㤄㴄㸄㸄䄄 䴀䄄㌄㠄㤄 㴀㰄䀄䔄⸄∀Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䴀漀渀最漀氀椀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("Барын сүүл байснаас батганы толгой байсан нь дээр.", TestName="{m}(Mongolian-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ጀ〄䀄〄〄䀄 ㌀〄㴄䘄 䔀꼄㴄㠄㤄㌄ 㐀㠄㤄㬄䴄䔄⸄ 吀㸀㬄㌄㸄㤄㌄㸄㸄䀄 㰀伄㴄㌄〄㴄 䔀꼄㴄㠄㤄㌄ 㐀㠄㤄㬄䴄䔄⸄∀Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䴀漀渀最漀氀椀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("Աղւէսը բերանը խաղողին չի հասնում, ասում է՝ խակ է", TestName="{m}(Armenian-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀琅攅瘅 茀愅甅缅 眀攅者攅茅 礀欅 搀愅簅瘅愅Ⰵ 愀琅攅瘅 紀愅者崅 䐀愅紅欅紅∅Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀爀洀攀渀椀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("Արևին ասում է դուրս մի արի՝ ես դուրս եմ եկել", TestName="{m}(Armenian-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㌀愅甅氅欅 挀氅洅欅瘅 ㄀舅攅缅愅者愅瘅 攀瘅 漀愅者搅砅舅琅Ⰵ 愀紅砅舅琅 最崅 眀砅舅缅 愀者朅嬅萅Ⰵ 挀愅氅氅朅紅 挀瘅愅脅∅Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀爀洀攀渀椀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("पृथिव्यां त्रीणी रत्नानि जलमन्नं सुभाषितम्।", TestName="{m}(Hindi-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ᰀ⠉⠉䀉 ᰀ⠉䴉⸉ⴉ䄉⸉㼉㠉䴉ᬉ 㠀䴉㔉〉䴉ᜉ㸉☉⨉㼉 ᜀ〉䀉⼉㠉㼉∉Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀椀渀搀椀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", TestName="{m}(Hindi-Proverb3)")]਍    瀀甀戀氀椀挀 瘀漀椀搀 圀漀爀搀猀圀漀爀欀猀⠀匀琀爀椀渀最 瘀愀氀甀攀⤀ഀഀ
    {਍        圀漀爀搀猀 猀 㴀 渀攀眀 圀漀爀搀猀⠀⤀㬀ഀഀ
        s.SetString(value);਍        䄀猀猀攀爀琀⸀䄀爀攀䔀焀甀愀氀⠀猀⸀吀漀匀琀爀椀渀最⠀⤀Ⰰ 瘀愀氀甀攀⤀㬀ഀഀ
    }਍ഀഀ
    [TestCase("red")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀漀爀愀渀最攀∀⤀崀ഀഀ
    [TestCase("yellow")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀最爀攀攀渀∀⤀崀ഀഀ
    [TestCase("blue")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀椀渀搀椀最漀∀⤀崀ഀഀ
    [TestCase("violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀Ԁ牽⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ刀攀搀⤀∀⤀崀ഀഀ
    [TestCase("橙色", TestName="{m}(Chinese-Orange)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀쐀犞⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ夀攀氀氀漀眀⤀∀⤀崀ഀഀ
    [TestCase("绿色", TestName="{m}(Chinese-Green)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀�犄⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ䈀氀甀攀∀⤀崀ഀഀ
    [TestCase("靛蓝色", TestName="{m}(Chinese-Indigo")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀⬀坽灿牑⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ嘀椀漀氀攀琀∀⤀崀ഀഀ
    [TestCase("црвена", TestName = "{m}(Serbian-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㴀〄䀄〄㴄弄〄䄄䈄〄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ伀爀愀渀最攀⤀∀⤀崀ഀഀ
    [TestCase("жута", TestName = "{m}(Serbian-Yellow)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㜀㔄㬄㔄㴄〄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ䜀爀攀攀渀⤀∀⤀崀ഀഀ
    [TestCase("плава", TestName = "{m}(Serbian-Blue")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㠀㴄㐄㠄㌄㸄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ䤀渀搀椀最漀∀⤀崀ഀഀ
    [TestCase("љубичаста", TestName = "{m}(Serbian-Violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䜀攀漀爀最攀 圀愀猀栀椀渀最琀漀渀∀⤀崀ഀഀ
    [TestCase("John Adams")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀吀栀漀洀愀猀 䨀攀昀昀攀爀猀漀渀∀⤀崀ഀഀ
    [TestCase("James Madison")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䨀愀洀攀猀 䴀漀渀爀漀攀∀⤀崀ഀഀ
    [TestCase("John Quincy Adams")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀䄀渀搀爀攀眀 䨀愀挀欀猀漀渀∀⤀崀ഀഀ
    [TestCase("村਍╎㥦≪Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀愀爀甀欀椀䴀甀爀愀欀愀洀椀⤀∀⤀崀ഀഀ
    [TestCase("三島 由紀夫", TestName="{m}(MishimaYukio)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ऀⱔ灧樰樰∰Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀夀漀猀栀椀洀漀琀漀䈀愀渀愀渀愀⤀∀⤀崀ഀഀ
    [TestCase("大江健三郎", TestName="{m}(OeKenzaburo)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀�⁺뜀ၞ≢Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀愀眀愀戀愀琀愀夀愀猀甀渀愀爀椀⤀∀⤀崀ഀഀ
    [TestCase("桐野夏生", TestName="{m}(TongyeXiasheng)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ꔀ�赝䮟쭎≎Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀刀礀甀渀漀猀甀欀攀䄀欀甀琀愀最愀眀愀⤀∀⤀崀ഀഀ
    [TestCase("로마는 하루아침에 이루어진 것이 아니다", TestName="{m}(Korean-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀글킰䂹⃇저À€€␀킼䂹⃇倀É€钴⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("말을 냇가에 끌고 갈 수는 있어도 억지로 물을 먹일 수는 없다", TestName="{m}(Korean-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㠀釖璷탇賅€㰀Ⓕ¸쒬₳ᔀ쳂₹⠀곌璹₺뀀⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("Љубазни фењерџија чађавог лица хоће да ми покаже штос.", TestName = "{m}(Serbian-Pangram)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ᬀ〄㨄㸄 䈀㠄 堀㔄 㼀㬄㠄䈄㨄䌄 ㈀㸄㐄䌄 㜀〄㰄䌄䈄㠄䈄㠄 㠀 ㄀䌄㐄〄㬄䌄 㴀〄处䌄䈄㠄䈄㠄∄Ⰰ 吀攀猀琀一愀洀攀 㴀 ∀笀洀紀⠀匀攀爀戀椀愀渀ⴀ倀爀漀瘀攀爀戀⤀∀⤀崀ഀഀ
    [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", TestName="{m}(Mongolian-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㴄㌄䀄䄄㴄 ㄀㸄䀄㸄㸄㴄䬄 䔀㸄㤄㴄㸄㸄䄄 䴀䄄㌄㠄㤄 㴀㰄䀄䔄⸄∀Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䴀漀渀最漀氀椀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("Барын сүүл байснаас батганы толгой байсан нь дээр.", TestName="{m}(Mongolian-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ጀ〄䀄〄〄䀄 ㌀〄㴄䘄 䔀꼄㴄㠄㤄㌄ 㐀㠄㤄㬄䴄䔄⸄ 吀㸀㬄㌄㸄㤄㌄㸄㸄䀄 㰀伄㴄㌄〄㴄 䔀꼄㴄㠄㤄㌄ 㐀㠄㤄㬄䴄䔄⸄∀Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䴀漀渀最漀氀椀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("Աղւէսը բերանը խաղողին չի հասնում, ասում է՝ խակ է", TestName="{m}(Armenian-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㄀琅攅瘅 茀愅甅缅 眀攅者攅茅 礀欅 搀愅簅瘅愅Ⰵ 愀琅攅瘅 紀愅者崅 䐀愅紅欅紅∅Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀爀洀攀渀椀愀渀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("Արևին ասում է դուրս մի արի՝ ես դուրս եմ եկել", TestName="{m}(Armenian-Proverb3)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀㌀愅甅氅欅 挀氅洅欅瘅 ㄀舅攅缅愅者愅瘅 攀瘅 漀愅者搅砅舅琅Ⰵ 愀紅砅舅琅 最崅 眀砅舅缅 愀者朅嬅萅Ⰵ 挀愅氅氅朅紅 挀瘅愅脅∅Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䄀爀洀攀渀椀愀渀ⴀ倀爀漀瘀攀爀戀㐀⤀∀⤀崀ഀഀ
    [TestCase("पृथिव्यां त्रीणी रत्नानि जलमन्नं सुभाषितम्।", TestName="{m}(Hindi-Proverb1)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀ᰀ⠉⠉䀉 ᰀ⠉䴉⸉ⴉ䄉⸉㼉㠉䴉ᬉ 㠀䴉㔉〉䴉ᜉ㸉☉⨉㼉 ᜀ〉䀉⼉㠉㼉∉Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䠀椀渀搀椀ⴀ倀爀漀瘀攀爀戀㈀⤀∀⤀崀ഀഀ
    [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", TestName="{m}(Hindi-Proverb3)")]਍    瀀甀戀氀椀挀 瘀漀椀搀 䄀搀搀圀漀爀欀猀⠀匀琀爀椀渀最 瘀愀氀甀攀⤀ഀഀ
    {਍        圀漀爀搀猀 眀 㴀 渀攀眀 圀漀爀搀猀⠀⤀㬀ഀഀ
        Assert.IsFalse(WordStorage.Instance.Contains(value));਍        䄀猀猀攀爀琀⸀䤀猀吀爀甀攀⠀圀漀爀搀匀琀漀爀愀最攀⸀䤀渀猀琀愀渀挀攀⸀䔀渀琀爀椀攀猀 㴀㴀 ㄀⤀㬀ഀഀ
        w.SetString(value);਍        䄀猀猀攀爀琀⸀䤀猀吀爀甀攀⠀圀漀爀搀匀琀漀爀愀最攀⸀䤀渀猀琀愀渀挀攀⸀䌀漀渀琀愀椀渀猀⠀瘀愀氀甀攀⤀⤀㬀ഀഀ
        Assert.IsTrue(WordStorage.Instance.Entries == 2);਍    紀ഀഀ
਍    嬀吀攀猀琀䌀愀猀攀⠀∀爀攀搀∀⤀崀ഀഀ
    [TestCase("orange")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀礀攀氀氀漀眀∀⤀崀ഀഀ
    [TestCase("green")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀戀氀甀攀∀⤀崀ഀഀ
    [TestCase("indigo")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀瘀椀漀氀攀琀∀⤀崀ഀഀ
    [TestCase("紅色", TestName="{m}(Chinese-Red)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀夀牪⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ伀爀愀渀最攀⤀∀⤀崀ഀഀ
    [TestCase("黄色", TestName="{m}(Chinese-Yellow)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀＀牾⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ䜀爀攀攀渀⤀∀⤀崀ഀഀ
    [TestCase("蓝色", TestName="{m}(Chinese-Blue")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀嬀�犄⊂Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䌀栀椀渀攀猀攀ⴀ䤀渀搀椀最漀∀⤀崀ഀഀ
    [TestCase("紫罗兰色", TestName="{m}(Chinese-Violet")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀尀좸钹₲堀䒸棅탎⃅琀뒸쓅⃉茀璬⃇䐀죅⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀 ⴀ 刀漀洀攀 眀愀猀 渀漀琀 洀愀搀攀 漀瘀攀爀渀椀最栀琀⤀∀⤀崀ഀഀ
    [TestCase("낮말은 새가 듣고 밤말은 쥐가 듣는다", TestName="{m}(Korean-Proverb2)")]਍    嬀吀攀猀琀䌀愀猀攀⠀∀퀀䒹⃇윀°킬⃅䰀€ࠀ€᠀铂₲蠀듇쓅₳딀샅峉₸㰀䒻⃇㤀粺⃇᠀铂₲였⊲Ⰰ 吀攀猀琀一愀洀攀㴀∀笀洀紀⠀䬀漀爀攀愀渀ⴀ倀爀漀瘀攀爀戀㌀⤀∀⤀崀ഀഀ
    [TestCase("호랑이에게 물려가도 정신만 차리면 산다", TestName="{m}(Korean-Proverb4)")]਍    瀀甀戀氀椀挀 瘀漀椀搀 一甀洀戀攀爀攀搀圀漀爀搀猀圀漀爀欀猀⠀匀琀爀椀渀最 瘀愀氀甀攀⤀ഀഀ
    {਍        一甀洀戀攀爀攀搀圀漀爀搀猀 眀 㴀 渀攀眀 一甀洀戀攀爀攀搀圀漀爀搀猀⠀⤀㬀ഀഀ
        Assert.IsTrue(WordStorage.Instance.Entries == 1);਍        昀漀爀 ⠀瘀愀爀 椀 㴀 　㬀 椀 㰀 ㄀　　㬀 ⬀⬀椀⤀ഀഀ
        {਍            眀⸀匀攀琀匀琀爀椀渀最⠀ 瘀愀氀甀攀 ⬀ 椀⤀㬀ഀഀ
            Assert.IsTrue(WordStorage.Instance.Entries == 2);਍        紀ഀഀ
    }਍紀ഀഀ
਍紀ഀഀ
#endif਍
